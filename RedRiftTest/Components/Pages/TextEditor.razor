@page "/"
@page "/index"
@inject ILoggerFactory factory
@inject NovelsContext context

<PageTitle>Text Editor</PageTitle>

<div class="card">
    <div class="card-header">
        <strong>New reply section:</strong>
    </div>
    <div class="card-body">
        <EditForm Model="@settings" OnSubmit="AddNewReplyAsync">
            <div class="form-group mt-2">
                <label for="hero_name">Hero:</label>
                <InputText id="hero_name" class="form-control" placeholder="Enter hero name" @bind-Value="settings!.HeroName"></InputText>
            </div>
            <div class="form-group mt-2">
                <label for="hero_reply">Reply:</label>
                <InputTextArea id="hero_reply" class="form-control" placeholder="Enter hero reply" @bind-Value="settings!.HeroReply"></InputTextArea>
            </div>
            <button type="submit" class="btn btn-primary mt-2">Add new reply</button>
            <ul class="validation-errors mt-2">
                @foreach (var error in validationErrors!)
                {
                    <li class="validation-message">@error</li>
                }
            </ul>
        </EditForm>
    </div>
</div>

<div class="card mt-2">
    <div class="card-header">
        <strong>Options section:</strong>
    </div>
    <div class="card-body">
        <p><em>Heroes:</em></p>
        @if (heroes == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            if (heroes?.Count() > 0)
            {
                <table class="table table-bordered table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Name:</th>
                            <th>Color:</th>
                            <th>Replies count:</th>
                            <th>Actions:</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var hero in heroes)
                        {
                            <tr>
                                <td>@hero.Name</td>
                                <td>@hero.Color</td>
                                <td>@hero.Replies.Count</td>
                                <td><button class="btn btn-primary" @onclick="@(async () => await RemoveHeroAsync(hero.Id))">remove</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <strong class="mt-2">heroes is empty</strong>
            }
        }
    </div>
</div>

<div class="card mt-2">
    <div class="card-header">
        <strong>Replies:</strong>
    </div>
    <div class="card-body">
        @if (replies == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            if (replies.Count() > 0)
            {
                foreach (var reply in replies)
                {
                    <p class="mt-2"><strong style="color:@reply.Hero!.Color">@reply.Order) @reply.Hero!.Name: </strong>@reply.Text</p>
                }
            }
            else
            {
                <strong class="mt-2">replies is empty</strong>
            }
        }
    </div>
</div>


@code {
    private Random? random;
    private ReplySettings? settings;
    private List<string>? validationErrors;
    private ILogger<TextEditor>? logger;
    private IEnumerable<HeroEntity>? heroes; // todo: mapper models
    private IEnumerable<ReplyEntity>? replies; // todo: mapper models

    protected override async Task OnInitializedAsync()
    {
        random = new();
        settings = new();
        validationErrors = new();
        logger = factory.CreateLogger<TextEditor>();

        await UpdateUiAsync();
        await base.OnInitializedAsync();
    }

    private async Task UpdateUiAsync()
    {
        heroes = await context.GetHeroesAsync();
        replies = await context.GetOrderedRepliesAsync();
    }

    private async Task RemoveHeroAsync(Guid id)
    {
        try
        {
            var repliesToRemove = replies?.Where(x => x.HeroId == id);
            if (repliesToRemove != null)
            {
                context.Replies.RemoveRange(repliesToRemove);
                var heroToRemove = heroes?.FirstOrDefault(x => x.Id == id);
                if (heroToRemove != null)
                {
                    context.Heroes.Remove(heroToRemove);
                }
                await context.SaveChangesAsync().ConfigureAwait(false);

                await UpdateUiAsync();
            }
        }
        catch (Exception ex)
        {
            logger!.LogError(ex, ex.Message);
        }
    }

    private async Task AddNewReplyAsync()
    {
        try
        {
            if (validationErrors!.Count > 0)
            {
                validationErrors.Clear();
            }
            if (settings!.HeroName!.IsEmpty())
            {
                validationErrors.Add("Hero name should be filled!");
            }
            if (settings!.HeroReply!.IsEmpty())
            {
                validationErrors.Add("Hero reply should be filled!");
            }
            if (validationErrors.Count == 0)
            {
                var existingHero = heroes?.FirstOrDefault(x => x.Name == settings!.HeroName);
                var lastReply = replies?.LastOrDefault();
                var getOrder = () => lastReply == null ? 1 : lastReply.Order + 1;
                if (existingHero != null)
                {
                    var reply = new ReplyEntity
                    {
                        Text = settings!.HeroReply,
                        Hero = existingHero,
                        Order = getOrder.Invoke()
                    };
                    await context.Replies.AddAsync(reply).ConfigureAwait(false);
                }
                else
                {
                    var existingColors = heroes?.Select(x => x.Color);
                    var color = GenerateHeroColor();
                    while (existingColors!.Contains(color))
                    {
                        color = GenerateHeroColor();
                    }
                    var hero = new HeroEntity
                    {
                        Name = settings!.HeroName,
                        Color = color
                    };
                    var reply = new ReplyEntity
                    {
                        Text = settings!.HeroReply,
                        Hero = hero,
                        Order = getOrder.Invoke()
                    };
                    await context.Heroes.AddAsync(hero).ConfigureAwait(false);
                    await context.Replies.AddAsync(reply).ConfigureAwait(false);
                }
                await context.SaveChangesAsync().ConfigureAwait(false);
                await UpdateUiAsync();
            }
        }
        catch (Exception ex)
        {
            logger!.LogError(ex, ex.Message);
        }
    }

    private string GenerateHeroColor() => $"#{random?.Next(0x1000000):X6}";
}
